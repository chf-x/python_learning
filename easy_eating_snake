import pygame, sys, random
# 这个模块包含各种pygame所使用的常量
from pygame.locals import *

# 1.define color constant
redColor = pygame.Color(255, 0, 0)
blackColor = pygame.Color(0, 0, 0)
whiteColor = pygame.Color(255, 255, 255)

# 2.define the function that game over
def gameOver():
    pygame.quit()
    sys.exit()

# 3. define main function-->define our entry function
def main():
    # initialize pygame
    pygame.init()
    # define a var to control speed
    fpsClock = pygame.time.Clock()
    # create pygame window to show
    playSurface = pygame.display.set_mode((640,480))
    pygame.display.set_caption("贪吃蛇")
    
    # 初始化变量
    # 初始化贪吃蛇的起始坐标位置,以(100,100)为基准
    snakePosition = [100, 100]
    # 初始化贪吃蛇的长度,列表中有几个元素有几段长度
    snakeBody = [[100, 100], [80, 100], [60, 100]]
    # 初始化食物的位置
    targetPosition = [300, 300]
    # 食物是否被吃掉的标记,1就是没有吃掉
    targetFlag = 1
    # 初始化方向
    direction = 'right'
    # 定义一个方向变量<人为控制,按键>
    changeDirection = direction
    # pygame中的所有事件都是放在一个实时循环中完成的

    while True:
        for event in pygame.event.get(): # 从队列中获取事件
            if event.type == QUIT:
                gameOver()
            elif event.type == KEYDOWN:
                if event.key == K_RIGHT :
                    changeDirection = 'right'
                    #print('right')
                elif event.key == K_LEFT:
                    changeDirection = 'left'
                elif event.key == K_UP:
                    changeDirection = 'up'
                elif event.key == K_DOWN:
                    changeDirection = 'down'
                    #print('down')
                elif event.key == K_ESCAPE:
                    pygame.event.post(pygame.event.Event(QUIT))

        # 确定方向
        if changeDirection == 'left'  and direction != 'right':
            direction = changeDirection
        if changeDirection == 'right'  and direction != 'left':
            direction = changeDirection
        if changeDirection == 'up'  and direction != 'down':
            direction = changeDirection
        if changeDirection == 'down'  and direction != 'up':
            direction = changeDirection 

        # 根据方向移动蛇头
        if direction == 'right':
            snakePosition[0] += 20
        if direction == 'left':
            snakePosition[0] -= 20
        if direction == 'down':
            snakePosition[1] += 20
        if direction == 'up':
            snakePosition[1] -= 20
        
        # 判断蛇是否撞到自身，撞到则游戏结束
        if snakePosition in snakeBody:
            gameOver()

        # 增加蛇的长度
        snakeBody.insert(0,list(snakePosition))
        
        # 吃到食物
        if snakePosition[0] == targetPosition[0] and snakePosition[1] == targetPosition[1]:
            targetFlag = 0
        else:
            snakeBody.pop() 

        # 如果食物被吃掉，产生一个新的食物
        while targetFlag == 0:
            x = random.randrange(1,32)
            y = random.randrange(1,24)
            if [x, y] not in snakeBody:
                targetPosition = [int(x*20),int(y*20)]
                targetFlag = 1
        
        # 填充背景颜色
        playSurface.fill(blackColor)

        for position in snakeBody:
            pygame.draw.rect(playSurface,whiteColor,Rect(position[0],position[1],20,20))

        pygame.draw.rect(playSurface,redColor,Rect(targetPosition[0],targetPosition[1],20,20))

        # 更新显示到屏幕
        pygame.display.flip()

        # 判断蛇是否穿墙
        if snakePosition[0] > 620: 
            snakePosition[0] = 0
        if snakePosition[0] < 0:
            snakePosition[0] = 0
        if snakePosition[1] > 460:
            snakePosition[1] = 0
        if snakePosition[1] < 0:
            snakePosition[1] = 460

        # 控制游戏速度
        fpsClock.tick(5)

#启动这个入口函数
if __name__ == '__main__':
    main()




